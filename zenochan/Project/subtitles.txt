Cassandra a wide column store NoSQL database famous for its ability to distribute petabytes of data with unmatched reliability and performance it was created in 2008 by Avinash Lakshmana who was responsible for scaling Facebook's inbox search feature by 2010 it became a top-level Apache project and today is used at scale by big companies like apple which manages a staggering 100 petabytes of data across hundreds of thousands of server instances it's a general purpose database with use cases for e-commerce content management audit logging and everything in between each instance of Cassandra is called a node and typically stores about two terabytes of data what makes it special though is that nodes can be easily distributed to scale horizontally every node has the same read write capabilities of another node but is responsible for its own partition of data nodes are grouped together in a cluster or ring and data is typically replicated on multiple nodes which means no single point of fail

your and 100 uptime the data is wrapped in a key space giving developers control over how it replicates in the cluster each key space contains one or more tables which represent tabular data like you might find in a relational database however it's schema-less and can handle unstructured data which developers can manage with the Cassandra query language the easiest way to get started is by creating a free serverless database with Astra it deploys to the cloud of your choice then scales automatically on demand first we'll need to define a key space which acts as a container for replication next we'll need to connect to the database which can be accomplished in a variety of ways it has SDKs for major languages and a tool called Stargate that makes data accessible via RAS GraphQL and GRC, or you can execute raw CQL code which is a subset of SQL create a table and include a primary key to uniquely identify every row then each column will have its own name and data type now add data to that 

table with the insert into statement then you select to read data from the table it's also possible to use the where clause to filter and query the data, but an index will be required on the column on the surface this may look a lot like a relational database, but it doesn't support joins and that's by design instead of modeling data into small normalized tables in Cassandra it's denormalized to match the structure of known queries making reads much faster at scale, and it's also possible to implement storage attached indexing to handle complex relational queries this has been Cassandra in 100 seconds let me know if you want to see a full tutorial in the comments thanks for watching and I will see you in the next one 